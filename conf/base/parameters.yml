random_state: 42
target_col: 'returnShipment'
meta_col: 'basketID' # previous: ordnr_col
artnr_col: 'itemID'

ret_p_hyperparams:
  N_min: [10, 20, 50, 100]
  weights: [True, False]
  sorting_type: ["lift", "conf"]
  basket_max: [1, 3, 5, 100]

budgets: 10 # not used in experiments
coldict:
  ord_encode: ["color", "size", "customerID", "salutation", "state", "itemID", "manufacturerID"] # "item_color_cat", "item_size_cat",
  # cat_passnoenc: ['weekdayOrdered', 'weekdayReceived', 'weDelivery', 'accOldSys', 'userAgeImp']
  cat_pass: ['weekdayOrdered', 'weekdayReceived', 'weDelivery', 'accOldSys', "color", "size", "userAgeImp"]
  # double: one normal + one catboost col; seperate for arguments -> ["manufacturerID", "salutation", "state"] + ['item_color_cat', 'item_size_cat']
  cat_catboost: ["customerID", "manufacturerID", "salutation", "state", 'monthOrdered', "itemID"] # 'item_color_cat', 'item_size_cat',
  cont: ['price', 'discount', 'basket_price', 'basketNArts', 'durationDelivery', 'accAgeAtOrder', 'UserAgeOrder']
  # retp_imp: ['min_5_top_5_sqrt_w_lift', 'min_5_top_5_sqrt_w_conf']

bohb_catboost:
  description: "bohb_catboost"
  min_budget: 9
  max_budget: 243
  n_iterations: 5
  n_workers: 1

# catboost
metrics: ['MCC_test', 'F1_test', 'Recall_test', 'Prec_test', 'MCC_test_multiarts', 'Recall_test_multiarts', 'Prec_test_multiarts']

bohb_pytorch:
  description: "bohb_pytorch"
  min_budget: 2
  max_budget: 40
  n_iterations: 7
  n_workers: 1
  min_n_workers: 1

patience_torch: 3
metrics_pytorch: ['MCC_test', 'F1_test', 'Recall_test', 'Prec_test']